{
  "name": "Books demo API",
  "version": "1",
  "items": [
    {
      "type": "http",
      "name": "all orders",
      "seq": 6,
      "request": {
        "url": "{{baseUrl}}/orders",
        "method": "GET",
        "headers": [],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"Check if API returns a successful status code\", function () {\n    const data = res.getBody();\n    expect(res.getStatus()).to.equal(200);\n});\n\ntest(\"Verify that API response is an object\", function () {\n    const data = res.getBody();\n    expect(data).to.be.an(\"array\");\n});\n\ntest(\"Ensure API response has at least one key\", function () {\n    const data = res.getBody();\n    expect(Object.keys(data).length).to.be.greaterThan(0);\n});\n\ntest(\"Verify that API response has the same 'createdBy' value across all items\", function () {\n    const data = res.getBody();\n    let createdByValues = [];\n    data.forEach(obj => {\n        if (typeof obj.createdBy !== 'undefined') {\n            createdByValues.push(obj.createdBy);\n        }\n    });\n});",
        "docs": "",
        "auth": {
          "mode": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        }
      }
    },
    {
      "type": "http",
      "name": "book info",
      "seq": 4,
      "request": {
        "url": "{{baseUrl}}/books/:bookId",
        "method": "GET",
        "headers": [],
        "params": [
          {
            "name": "bookId",
            "value": "{{bookId}}",
            "type": "path",
            "enabled": true
          }
        ],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "function getRandomNumber() {\n    return Math.floor(Math.random() * 5) + 1;\n}\n\nbru.setVar(\"bookId\", getRandomNumber());"
        },
        "vars": {},
        "assertions": [],
        "tests": "test(\"Check successful request\", function () {\n    const data = res.getBody();\n    expect(res.getStatus()).to.equal(200);\n    expect(data).to.be.an(\"object\");\n    expect(Object.keys(data).length).to.be.greaterThan(0);\n});\n\ntest(\"Verify book details in response\", function () {\n    const data = res.getBody();\n    expect(data.id).to.be.a(\"number\");\n    expect(data.name).to.be.a(\"string\");\n    expect(data.author).to.be.a(\"string\");\n    expect(data.type).to.be.a(\"string\");\n    expect(data.price).to.be.a(\"number\");\n    expect(data.available).to.be.a(\"boolean\");\n});\n\ntest(\"Check availability when currentStock is 0\", function () {\n    const data = res.getBody();\n    if (data.available) {\n      expect(data['current-stock']).to.be.greaterThan(0);\n    } else {\n      expect(data['current-stock']).to.be.equal(0);\n    }\n});\n\ntest(\"Check for missing fields in response\", function () {\n    const data = res.getBody();\n    expect(Object.keys(data).includes('id')).to.be.true;\n    expect(Object.keys(data).includes('name')).to.be.true;\n    expect(Object.keys(data).includes('author')).to.be.true;\n    expect(Object.keys(data).includes('type')).to.be.true;\n    expect(Object.keys(data).includes('price')).to.be.true;\n    expect(Object.keys(data).includes('current-stock')).to.be.true;\n    expect(Object.keys(data).includes('available')).to.be.true;\n});",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "delete order",
      "seq": 9,
      "request": {
        "url": "{{baseUrl}}/orders/:orderId",
        "method": "DELETE",
        "headers": [],
        "params": [
          {
            "name": "orderId",
            "value": "{{orderId}}",
            "type": "path",
            "enabled": true
          }
        ],
        "body": {
          "mode": "json",
          "json": "",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"Verify successful request\", function () {\n    const data = res.getBody();\n    expect(res.getStatus()).to.equal(204);\n});",
        "docs": "",
        "auth": {
          "mode": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        }
      }
    },
    {
      "type": "http",
      "name": "health",
      "seq": 2,
      "request": {
        "url": "{{baseUrl}}/status",
        "method": "GET",
        "headers": [],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"Verify successful request\", function () {\n    const data = res.getBody();\n    expect(res.getStatus()).to.equal(200);\n    expect(Object.keys(data).length).to.be.greaterThan(0);\n});",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "list of books",
      "seq": 3,
      "request": {
        "url": "{{baseUrl}}/books",
        "method": "GET",
        "headers": [],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"Verify successful request\", function () {\n    const data = res.getBody();\n    expect(res.getStatus()).to.equal(200);\n    expect(Object.keys(data).length).to.be.greaterThan(0);\n});\n\ntest(\"Verify each book contains all the data\", function () {\n    const data = res.getBody();\n    expect(data).to.be.an(\"array\");\n    data.forEach(book => {\n        expect(book.id).to.be.a(\"number\");\n        expect(book.name).to.be.a(\"string\");\n        expect(book.type).to.be.a(\"string\");\n        expect(book.available).to.be.a(\"boolean\");\n    });\n});\n\ntest(\"Verify that the API returns a valid list of book types\", function () {\n    const data = res.getBody();\n    const bookTypes = new Set(Object.values(data).map((book) => book.type));\n    expect(Array.from(bookTypes)).to.have.members([\"fiction\", \"non-fiction\"]);\n});\n\ntest(\"Verify each book has a unique id\", function () {\n    const data = res.getBody();\n    expect(data).to.be.an(\"array\");\n\n    const ids = data.map(book => book.id);\n    const uniqueIds = new Set(ids);\n\n    expect(uniqueIds.size).to.equal(ids.length);\n});\n",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "order info",
      "seq": 7,
      "request": {
        "url": "{{baseUrl}}/orders/:orderId",
        "method": "GET",
        "headers": [],
        "params": [
          {
            "name": "orderId",
            "value": "{{orderId}}",
            "type": "path",
            "enabled": true
          }
        ],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"Verify successful request\", function () {\n    const data = res.getBody();\n    expect(res.getStatus()).to.equal(200);\n    expect(Object.keys(data).length).to.be.greaterThan(0);\n});\n\ntest(\"check data structure\", function () {\n    const data = res.getBody();\n    expect(data).to.be.an(\"object\");\n});\n\ntest(\"check of required fields\", function () {\n    const data = res.getBody();\n    expect(Object.keys(data).length).to.be.greaterThan(0);\n    expect(data.id).to.be.a(\"string\");\n    expect(data.bookId).to.be.a(\"number\");\n    expect(data.customerName).to.be.a(\"string\");\n    expect(data.createdBy).to.be.a(\"string\");\n    expect(data.quantity).to.be.a(\"number\");\n    expect(data.timestamp).to.be.a(\"number\");\n});",
        "docs": "",
        "auth": {
          "mode": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        }
      }
    },
    {
      "type": "http",
      "name": "order",
      "seq": 5,
      "request": {
        "url": "{{baseUrl}}/orders",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n  \"bookId\": \"{{bookId}}\",\n  \"customerName\": \"{{clientName}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "function getRandomNumber() {\n    let num = Math.floor(Math.random() * 5) + 1;\n    while (num === 2) {\n        num = Math.floor(Math.random() * 5) + 1;\n    }\n    return num;\n}\n\nbru.setVar(\"bookId\", getRandomNumber());",
          "res": "const orderId = res.getBody().orderId;\n\nbru.setEnvVar(\"orderId\", orderId);"
        },
        "vars": {},
        "assertions": [],
        "tests": "test(\"Verify successful request\", function () {\n    const data = res.getBody();\n    expect(res.getStatus()).to.equal(201);\n    expect(Object.keys(data).length).to.be.greaterThan(0);\n});\n\ntest(\"Verify that the API response is an object\", function () {\n    const data = res.getBody();\n    expect(data).to.be.an(\"object\");\n});\n\ntest(\"Check if the API response has at least one key\", function () {\n    const data = res.getBody();\n    expect(Object.keys(data).length).to.be.greaterThan(0);\n});\n\ntest(\"Verify that the 'created' property is a boolean value\", function () {\n    const data = res.getBody();\n    expect(typeof data.created).to.equal(\"boolean\");\n});\n\ntest(\"Check if the API returns an order ID in the response\", function () {\n    const data = res.getBody();\n    expect(data.orderId).to.be.a(\"string\").not.to.be.empty;\n});",
        "docs": "",
        "auth": {
          "mode": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        }
      }
    },
    {
      "type": "http",
      "name": "token",
      "seq": 1,
      "request": {
        "url": "{{baseUrl}}/api-clients",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n   \"clientName\": \"{{clientName}}\",\n   \"clientEmail\": \"{{clientEmail}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const randomString = Math.random().toString(36).substring(2, 12);\n\nbru.setVar(\"clientName\", randomString);\nbru.setVar(\"clientEmail\", randomString + \"@test.biz\");",
          "res": "const token = res.getBody().accessToken;\n\nbru.setEnvVar(\"token\", token);"
        },
        "vars": {},
        "assertions": [],
        "tests": "test(\"Verify successful request\", function () {\n    const data = res.getBody();\n    expect(res.getStatus()).to.equal(201);\n    expect(Object.keys(data).length).to.be.greaterThan(0);\n});\n\ntest(\"Verify token successfully returned\", function () {\n    const data = res.getBody();\n    expect(data.accessToken).to.be.a(\"string\");\n});\n",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "update order",
      "seq": 8,
      "request": {
        "url": "{{baseUrl}}/orders/:orderId",
        "method": "PATCH",
        "headers": [],
        "params": [
          {
            "name": "orderId",
            "value": "{{orderId}}",
            "type": "path",
            "enabled": true
          }
        ],
        "body": {
          "mode": "json",
          "json": "{\n  \"customerName\": \"{{customerName}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const randomString = Math.random().toString(36).substring(2, 12);\n\nbru.setVar(\"customerName\", randomString);"
        },
        "vars": {},
        "assertions": [],
        "tests": "test(\"Verify successful request\", function () {\n    const data = res.getBody();\n    expect(res.getStatus()).to.equal(204);\n});",
        "docs": "",
        "auth": {
          "mode": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        }
      }
    }
  ],
  "activeEnvironmentUid": "ojVOXVNp03QqOdDZ977sO",
  "environments": [
    {
      "variables": [
        {
          "name": "baseUrl",
          "value": "https://simple-books-api.glitch.me",
          "enabled": true,
          "secret": false,
          "type": "text"
        }
      ],
      "name": "books"
    }
  ],
  "root": {
    "request": {
      "script": {
        "res": "// TEST CASE GENERATION WITH AI\n\n/*const axios = require('axios');\nconst local = bru.getCollectionVar(\"ollama_local\");\nconst model = bru.getCollectionVar(\"model\");\n\nasync function isOllamaRunning() {\n    try {\n        const response = await axios.get(`${local}/api/tags`);\n        return response.status === 200;\n    } catch (error) {\n        return false;\n    }\n}\n\nasync function testGenerator() {\n    try {\n        const apiUrl = await req.getUrl();\n        const apiResponse = await res.getBody();\n        \n        const prompt = `You are a QA Automation Engineer working on smoke tests a books API.\nYou are testing a web service that can do typical CRUD actions on the API. You create the tests based solely in the API response. It doesn't need to involve other calls.\nIt is very important that generate JavaScript API test scripts based ONLY on the fields of the API response from \\`${apiUrl}\\`\nThe API response looks like this:\n\\`\\`\\`${JSON.stringify(apiResponse)}\\`\\`\\`\n\nUse this format:\n\\`\\`\\`javascript\ntest(\"[Test description]\", function () {\n    const data = res.getBody();\n    expect(res.getStatus()).to.equal(200);\n    expect(data).to.be.an(\"object\");\n    expect(Object.keys(data).length).to.be.greaterThan(0);\n});\n// Add more tests based on response structure.\n\\`\\`\\``;\n        \n        const payload = {\n            model: model,\n            prompt: prompt,\n            stream: false, // Set to false to get the full response at once\n            options: {\n                temperature: 0.1,\n                top_k: 40,\n                top_p: 0.95,\n                max_tokens: 5000\n            }\n        };\n        \n        const response = await axios.post(`${local}/api/generate`, payload);\n        return response.data.response || \"\";\n    } catch (error) {\n        console.error(\"Error fetching response from Ollama:\", error.response?.data || error.message);\n        return null;\n    }\n}\n\n// Check if Ollama is running before executing\nisOllamaRunning().then(running => {\n    if (running) {\n        testGenerator().then(console.log);\n    } else {\n        console.error(\"Ollama server is not running. Please start it with 'ollama serve'\");\n    }\n});\n*/"
      },
      "vars": {
        "req": [
          {
            "name": "ollama_local",
            "value": "http://localhost:11434",
            "enabled": true,
            "local": false,
            "uid": "0srGJEIU4DxtMI67D1n1k"
          },
          {
            "name": "model",
            "value": "phi4",
            "enabled": true,
            "local": false,
            "uid": "0Ua35NlEmDSzjbLtj14jM"
          }
        ]
      }
    }
  },
  "brunoConfig": {
    "version": "1",
    "name": "Books demo API",
    "type": "collection",
    "ignore": [
      "node_modules",
      ".git"
    ],
    "size": 0.010432243347167969,
    "filesCount": 11
  }
}